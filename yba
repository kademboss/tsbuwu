--//Config\\--
getgenv().AutoFarm = true
getgenv().PickupDelay = 0.35
getgenv().MaxTeleportDistance = 45
getgenv().TeleportSpeed = 10

--//Script\\--
local RunService = game:GetService("RunService")

local LocalPlayer = game.Players.LocalPlayer
local Character = LocalPlayer.Character
local HumanoidRootPart = Character:FindFirstChild("HumanoidRootPart")

local function TeleportToPlace(targetCFrame)
    local startPosition = HumanoidRootPart.Position
    local direction = (targetCFrame.Position - startPosition).unit
    local distance = (targetCFrame.Position - startPosition).Magnitude

    local GoalCFrame
    local Loop = RunService.Heartbeat:Connect(function()
        if not GoalCFrame then return end

        for _, BasePart in pairs(Character:GetDescendants()) do
            if BasePart:IsA("BasePart") and BasePart.CanCollide then
                BasePart.CanCollide = false
            end
        end

        HumanoidRootPart.CFrame = GoalCFrame
    end)

    local bodyVelocity = Instance.new("BodyVelocity")
    bodyVelocity.Velocity = Vector3.new(0, 0, 0)
    bodyVelocity.MaxForce = Vector3.new(math.huge, math.huge, math.huge) -- Only counteract gravity on the Y axis
    bodyVelocity.Parent = HumanoidRootPart

    while distance > getgenv().MaxTeleportDistance do
        startPosition = startPosition + direction * getgenv().MaxTeleportDistance
        GoalCFrame = CFrame.new(startPosition)
        distance = (targetCFrame.Position - startPosition).Magnitude
        task.wait(10 / (getgenv().TeleportSpeed*10) )
    end

    GoalCFrame = targetCFrame
    task.wait()

    Loop:Disconnect()
    bodyVelocity:Destroy()
    task.wait()
end

local function LocateItem()
    for _, Item in pairs(workspace.Item_Spawns.Items:GetChildren()) do
        local ItemMeshPart = Item:FindFirstChild("MeshPart")
        local ProximityPrompt = Item:FindFirstChild("ProximityPrompt")

        if not ItemMeshPart or not ProximityPrompt then continue end
        if ProximityPrompt.MaxActivationDistance ~= 8 then continue end 

        return {
            ["ItemName"] = ProximityPrompt.ObjectText,
            ["ProximityPrompt"] = ProximityPrompt,
            ["CFrame"] = ItemMeshPart.CFrame,
            ["Instance"] = Item
        }
    end
end

while getgenv().AutoFarm do
    task.wait()

    local TargetItem = LocateItem()
    if not TargetItem then TeleportToPlace(CFrame.new(math.random(-1000, 1000), 0, math.random(-1000, 1000))); continue end

    --//Pickup Item\\--
    TeleportToPlace(TargetItem.CFrame)

    if (HumanoidRootPart.Position - TargetItem.CFrame.Position).Magnitude <= 8 then
        task.wait(getgenv().PickupDelay)
        fireproximityprompt(TargetItem.ProximityPrompt)
        task.wait(getgenv().PickupDelay)
        TargetItem.Instance:Destroy()
    end
end

wait(80) -- tim e when server hop.
for i,v in game.Players.LocalPlayer.Backpack:GetChildren() do
    game.Players.LocalPlayer.Backpack.Humanoid:EquipTool(Util:GetPlayer().Backpack:FindFirstChild(v))
     game.Players.LocalPlayer.Character.RemoteEvent:FireServer("EndDialogue", {NPC = "Merchant", Option = "Option1", Dialogue = "Dialogue5"})
 end
 wait(10) -- time to sell.
--hop servers
local TeleportService = game:GetService("TeleportService")
local Players = game:GetService("Players")

local function rejoinToDifferentServer()
    local player = Players.LocalPlayer
    local placeId = game.PlaceId  -- You can keep the same placeId or change it if teleporting to a different game.
    
    -- Teleport the player to a different server (same game).
    TeleportService:TeleportToPlaceInstance(placeId, game.JobId, player)
end

-- Call the function to rejoin to a different server.
rejoinToDifferentServer()
